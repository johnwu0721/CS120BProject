
Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  0000097c  00000a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800160  00800160  00000a70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014fd  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a49  00000000  00000000  000020ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a58  00000000  00000000  00002af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00003550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066b  00000000  00000000  00003740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f7  00000000  00000000  00003dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000045a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f7 c0       	rjmp	.+494    	; 0x224 <__vector_13>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1d 02       	muls	r17, r29
  8e:	29 02       	muls	r18, r25
  90:	2f 02       	muls	r18, r31
  92:	49 02       	muls	r20, r25
  94:	58 02       	muls	r21, r24
  96:	67 02       	muls	r22, r23
  98:	76 02       	muls	r23, r22
  9a:	85 02       	muls	r24, r21
  9c:	8e 02       	muls	r24, r30
  9e:	58 03       	fmul	r21, r16
  a0:	91 02       	muls	r25, r17
  a2:	9c 02       	muls	r25, r28
  a4:	c7 02       	muls	r28, r23
  a6:	f2 02       	muls	r31, r18
  a8:	1d 03       	fmul	r17, r21
  aa:	48 03       	fmul	r20, r16

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a0 36       	cpi	r26, 0x60	; 96
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a0 e6       	ldi	r26, 0x60	; 96
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a7 38       	cpi	r26, 0x87	; 135
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	e7 d2       	rcall	.+1486   	; 0x6b2 <main>
  e4:	49 c4       	rjmp	.+2194   	; 0x978 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <EEPROM_read>:
      if (c == 0) { return b;}
      a = b;
      b = c;
   }
   return 0;
}
  e8:	f9 99       	sbic	0x1f, 1	; 31
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <EEPROM_read>
  ec:	92 bd       	out	0x22, r25	; 34
  ee:	81 bd       	out	0x21, r24	; 33
  f0:	f8 9a       	sbi	0x1f, 0	; 31
  f2:	80 b5       	in	r24, 0x20	; 32
  f4:	08 95       	ret

000000f6 <delay_ms>:
  f6:	18 16       	cp	r1, r24
  f8:	19 06       	cpc	r1, r25
  fa:	5c f0       	brlt	.+22     	; 0x112 <delay_ms+0x1c>
  fc:	08 95       	ret
  fe:	00 00       	nop
 100:	21 50       	subi	r18, 0x01	; 1
 102:	31 09       	sbc	r19, r1
 104:	e1 f7       	brne	.-8      	; 0xfe <delay_ms+0x8>
 106:	4f 5f       	subi	r20, 0xFF	; 255
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	84 17       	cp	r24, r20
 10c:	95 07       	cpc	r25, r21
 10e:	19 f4       	brne	.+6      	; 0x116 <delay_ms+0x20>
 110:	08 95       	ret
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	27 e0       	ldi	r18, 0x07	; 7
 118:	33 e0       	ldi	r19, 0x03	; 3
 11a:	f1 cf       	rjmp	.-30     	; 0xfe <delay_ms+0x8>

0000011c <LCD_WriteCommand>:
 11c:	28 98       	cbi	0x05, 0	; 5
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	29 9a       	sbi	0x05, 1	; 5
 122:	00 00       	nop
 124:	29 98       	cbi	0x05, 1	; 5
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	e5 cf       	rjmp	.-54     	; 0xf6 <delay_ms>
 12c:	08 95       	ret

0000012e <LCD_ClearScreen>:
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	f5 cf       	rjmp	.-22     	; 0x11c <LCD_WriteCommand>
 132:	08 95       	ret

00000134 <LCD_Cursor>:
 134:	81 31       	cpi	r24, 0x11	; 17
 136:	18 f4       	brcc	.+6      	; 0x13e <LCD_Cursor+0xa>
 138:	81 58       	subi	r24, 0x81	; 129
 13a:	f0 cf       	rjmp	.-32     	; 0x11c <LCD_WriteCommand>
 13c:	08 95       	ret
 13e:	81 55       	subi	r24, 0x51	; 81
 140:	ed cf       	rjmp	.-38     	; 0x11c <LCD_WriteCommand>
 142:	08 95       	ret

00000144 <LCD_init>:
 144:	84 e6       	ldi	r24, 0x64	; 100
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	d6 df       	rcall	.-84     	; 0xf6 <delay_ms>
 14a:	88 e3       	ldi	r24, 0x38	; 56
 14c:	e7 df       	rcall	.-50     	; 0x11c <LCD_WriteCommand>
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	e5 df       	rcall	.-54     	; 0x11c <LCD_WriteCommand>
 152:	8f e0       	ldi	r24, 0x0F	; 15
 154:	e3 df       	rcall	.-58     	; 0x11c <LCD_WriteCommand>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	e1 df       	rcall	.-62     	; 0x11c <LCD_WriteCommand>
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	cb cf       	rjmp	.-106    	; 0xf6 <delay_ms>
 160:	08 95       	ret

00000162 <LCD_WriteData>:
 162:	28 9a       	sbi	0x05, 0	; 5
 164:	8b b9       	out	0x0b, r24	; 11
 166:	29 9a       	sbi	0x05, 1	; 5
 168:	00 00       	nop
 16a:	29 98       	cbi	0x05, 1	; 5
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	c2 cf       	rjmp	.-124    	; 0xf6 <delay_ms>
 172:	08 95       	ret

00000174 <LCD_DisplayString>:
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	18 2f       	mov	r17, r24
 17e:	eb 01       	movw	r28, r22
 180:	d6 df       	rcall	.-84     	; 0x12e <LCD_ClearScreen>
 182:	88 81       	ld	r24, Y
 184:	88 23       	and	r24, r24
 186:	51 f0       	breq	.+20     	; 0x19c <LCD_DisplayString+0x28>
 188:	01 e0       	ldi	r16, 0x01	; 1
 18a:	01 0f       	add	r16, r17
 18c:	81 2f       	mov	r24, r17
 18e:	d2 df       	rcall	.-92     	; 0x134 <LCD_Cursor>
 190:	89 91       	ld	r24, Y+
 192:	e7 df       	rcall	.-50     	; 0x162 <LCD_WriteData>
 194:	10 2f       	mov	r17, r16
 196:	88 81       	ld	r24, Y
 198:	81 11       	cpse	r24, r1
 19a:	f6 cf       	rjmp	.-20     	; 0x188 <LCD_DisplayString+0x14>
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <LCD_createChar>:
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	8b 01       	movw	r16, r22
 1b0:	88 30       	cpi	r24, 0x08	; 8
 1b2:	68 f4       	brcc	.+26     	; 0x1ce <LCD_createChar+0x28>
 1b4:	88 0f       	add	r24, r24
 1b6:	88 0f       	add	r24, r24
 1b8:	88 0f       	add	r24, r24
 1ba:	80 5c       	subi	r24, 0xC0	; 192
 1bc:	af df       	rcall	.-162    	; 0x11c <LCD_WriteCommand>
 1be:	e8 01       	movw	r28, r16
 1c0:	08 5f       	subi	r16, 0xF8	; 248
 1c2:	1f 4f       	sbci	r17, 0xFF	; 255
 1c4:	89 91       	ld	r24, Y+
 1c6:	cd df       	rcall	.-102    	; 0x162 <LCD_WriteData>
 1c8:	c0 17       	cp	r28, r16
 1ca:	d1 07       	cpc	r29, r17
 1cc:	d9 f7       	brne	.-10     	; 0x1c4 <LCD_createChar+0x1e>
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	a5 df       	rcall	.-182    	; 0x11c <LCD_WriteCommand>
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <TimerOn>:
 1dc:	8b e0       	ldi	r24, 0x0B	; 11
 1de:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1e2:	8d e7       	ldi	r24, 0x7D	; 125
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1fc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_avr_timer_M>
 200:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <_avr_timer_M+0x1>
 204:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <_avr_timer_M+0x2>
 208:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <_avr_timer_M+0x3>
 20c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <_avr_timer_cntcurr>
 210:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <_avr_timer_cntcurr+0x1>
 214:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <_avr_timer_cntcurr+0x2>
 218:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <_avr_timer_cntcurr+0x3>
 21c:	8f b7       	in	r24, 0x3f	; 63
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	8f bf       	out	0x3f, r24	; 63
 222:	08 95       	ret

00000224 <__vector_13>:
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
 236:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <_avr_timer_cntcurr>
 23a:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <_avr_timer_cntcurr+0x1>
 23e:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <_avr_timer_cntcurr+0x2>
 242:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <_avr_timer_cntcurr+0x3>
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	a1 09       	sbc	r26, r1
 24a:	b1 09       	sbc	r27, r1
 24c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <_avr_timer_cntcurr>
 250:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <_avr_timer_cntcurr+0x1>
 254:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <_avr_timer_cntcurr+0x2>
 258:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <_avr_timer_cntcurr+0x3>
 25c:	89 2b       	or	r24, r25
 25e:	8a 2b       	or	r24, r26
 260:	8b 2b       	or	r24, r27
 262:	99 f4       	brne	.+38     	; 0x28a <__vector_13+0x66>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <TimerFlag>
 26a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_avr_timer_M>
 26e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <_avr_timer_M+0x1>
 272:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <_avr_timer_M+0x2>
 276:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <_avr_timer_M+0x3>
 27a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <_avr_timer_cntcurr>
 27e:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <_avr_timer_cntcurr+0x1>
 282:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <_avr_timer_cntcurr+0x2>
 286:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <_avr_timer_cntcurr+0x3>
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <TimerSet>:
 29c:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <_avr_timer_M>
 2a0:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <_avr_timer_M+0x1>
 2a4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_avr_timer_M+0x2>
 2a8:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <_avr_timer_M+0x3>
 2ac:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <_avr_timer_cntcurr>
 2b0:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <_avr_timer_cntcurr+0x1>
 2b4:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <_avr_timer_cntcurr+0x2>
 2b8:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <_avr_timer_cntcurr+0x3>
 2bc:	08 95       	ret

000002be <startGame>:
         break;
   }
}

void startGame() { //starting message
   LCD_init();
 2be:	42 df       	rcall	.-380    	; 0x144 <LCD_init>
   LCD_ClearScreen();
 2c0:	36 df       	rcall	.-404    	; 0x12e <LCD_ClearScreen>
 2c2:	68 e4       	ldi	r22, 0x48	; 72
   LCD_DisplayString(1, "up to start");
 2c4:	71 e0       	ldi	r23, 0x01	; 1
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	55 df       	rcall	.-342    	; 0x174 <LCD_DisplayString>
 2ca:	60 e4       	ldi	r22, 0x40	; 64
   LCD_createChar(0,p1);
 2cc:	71 e0       	ldi	r23, 0x01	; 1
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	6a df       	rcall	.-300    	; 0x1a6 <LCD_createChar>
   LCD_Cursor(17);
 2d2:	81 e1       	ldi	r24, 0x11	; 17
 2d4:	2f df       	rcall	.-418    	; 0x134 <LCD_Cursor>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
   LCD_WriteData(0x00);
 2d8:	44 df       	rcall	.-376    	; 0x162 <LCD_WriteData>
 2da:	68 e3       	ldi	r22, 0x38	; 56
   LCD_createChar(1,p2);
 2dc:	71 e0       	ldi	r23, 0x01	; 1
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	62 df       	rcall	.-316    	; 0x1a6 <LCD_createChar>
 2e2:	82 e1       	ldi	r24, 0x12	; 18
   LCD_Cursor(18);
 2e4:	27 df       	rcall	.-434    	; 0x134 <LCD_Cursor>
 2e6:	81 e0       	ldi	r24, 0x01	; 1
   LCD_WriteData(0x01);
 2e8:	3c df       	rcall	.-392    	; 0x162 <LCD_WriteData>
 2ea:	60 e3       	ldi	r22, 0x30	; 48
   LCD_createChar(2,p3);
 2ec:	71 e0       	ldi	r23, 0x01	; 1
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	5a df       	rcall	.-332    	; 0x1a6 <LCD_createChar>
 2f2:	83 e1       	ldi	r24, 0x13	; 19
   LCD_Cursor(19);
 2f4:	1f df       	rcall	.-450    	; 0x134 <LCD_Cursor>
 2f6:	82 e0       	ldi	r24, 0x02	; 2
   LCD_WriteData(0x02);
 2f8:	34 df       	rcall	.-408    	; 0x162 <LCD_WriteData>
 2fa:	68 e2       	ldi	r22, 0x28	; 40
   LCD_createChar(3,p4);
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	52 df       	rcall	.-348    	; 0x1a6 <LCD_createChar>
   LCD_Cursor(20);
 302:	84 e1       	ldi	r24, 0x14	; 20
 304:	17 df       	rcall	.-466    	; 0x134 <LCD_Cursor>
   LCD_WriteData(0x03);
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	2c df       	rcall	.-424    	; 0x162 <LCD_WriteData>
   LCD_createChar(4,p5);
 30a:	60 e2       	ldi	r22, 0x20	; 32
 30c:	71 e0       	ldi	r23, 0x01	; 1
 30e:	84 e0       	ldi	r24, 0x04	; 4
 310:	4a df       	rcall	.-364    	; 0x1a6 <LCD_createChar>
   LCD_Cursor(21);
 312:	85 e1       	ldi	r24, 0x15	; 21
 314:	0f df       	rcall	.-482    	; 0x134 <LCD_Cursor>
   LCD_WriteData(0x04);
 316:	84 e0       	ldi	r24, 0x04	; 4
 318:	24 df       	rcall	.-440    	; 0x162 <LCD_WriteData>
   LCD_createChar(5,p3);
 31a:	60 e3       	ldi	r22, 0x30	; 48
 31c:	71 e0       	ldi	r23, 0x01	; 1
 31e:	85 e0       	ldi	r24, 0x05	; 5
   LCD_Cursor(22);
 320:	42 df       	rcall	.-380    	; 0x1a6 <LCD_createChar>
 322:	86 e1       	ldi	r24, 0x16	; 22
   LCD_WriteData(0x05);
 324:	07 df       	rcall	.-498    	; 0x134 <LCD_Cursor>
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	1c df       	rcall	.-456    	; 0x162 <LCD_WriteData>
   LCD_createChar(6,p2);
 32a:	68 e3       	ldi	r22, 0x38	; 56
 32c:	71 e0       	ldi	r23, 0x01	; 1
 32e:	86 e0       	ldi	r24, 0x06	; 6
 330:	3a df       	rcall	.-396    	; 0x1a6 <LCD_createChar>
 332:	87 e1       	ldi	r24, 0x17	; 23
   LCD_Cursor(23);
 334:	ff de       	rcall	.-514    	; 0x134 <LCD_Cursor>
 336:	86 e0       	ldi	r24, 0x06	; 6
 338:	14 df       	rcall	.-472    	; 0x162 <LCD_WriteData>
   LCD_WriteData(0x06);
 33a:	68 e1       	ldi	r22, 0x18	; 24
 33c:	71 e0       	ldi	r23, 0x01	; 1
 33e:	87 e0       	ldi	r24, 0x07	; 7
   LCD_createChar(7,p6);
 340:	32 df       	rcall	.-412    	; 0x1a6 <LCD_createChar>
 342:	88 e1       	ldi	r24, 0x18	; 24
 344:	f7 de       	rcall	.-530    	; 0x134 <LCD_Cursor>
 346:	87 e0       	ldi	r24, 0x07	; 7
 348:	0c cf       	rjmp	.-488    	; 0x162 <LCD_WriteData>
   LCD_Cursor(24);
 34a:	08 95       	ret

0000034c <displayScore>:
 34c:	f0 de       	rcall	.-544    	; 0x12e <LCD_ClearScreen>
 34e:	68 e5       	ldi	r22, 0x58	; 88
   LCD_WriteData(0x07);
 350:	71 e0       	ldi	r23, 0x01	; 1
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0f df       	rcall	.-482    	; 0x174 <LCD_DisplayString>
 356:	87 e0       	ldi	r24, 0x07	; 7
}

void displayScore() {
   LCD_ClearScreen();
   LCD_DisplayString(1, "score: ");
   LCD_Cursor(7);
 358:	ed de       	rcall	.-550    	; 0x134 <LCD_Cursor>
 35a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <score>
   LCD_WriteData(score + '0');
 35e:	80 5d       	subi	r24, 0xD0	; 208
 360:	00 cf       	rjmp	.-512    	; 0x162 <LCD_WriteData>
 362:	08 95       	ret

00000364 <displayHighScore>:
 364:	e4 de       	rcall	.-568    	; 0x12e <LCD_ClearScreen>
}

void displayHighScore() {
   LCD_ClearScreen();
   LCD_DisplayString(1, "highscore: ");
 366:	64 e5       	ldi	r22, 0x54	; 84
 368:	71 e0       	ldi	r23, 0x01	; 1
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	03 df       	rcall	.-506    	; 0x174 <LCD_DisplayString>
   LCD_Cursor(11);
 36e:	8b e0       	ldi	r24, 0x0B	; 11
 370:	e1 de       	rcall	.-574    	; 0x134 <LCD_Cursor>
   highScore = EEPROM_read(20);
 372:	84 e1       	ldi	r24, 0x14	; 20
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	b8 de       	rcall	.-656    	; 0xe8 <EEPROM_read>
 378:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <highScore>
 37c:	08 95       	ret

0000037e <menu_tick>:
 37e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <m_state>

enum MENU_STATES { WAIT, BUTPRESS, START, END } m_state ;
enum LED_STATES { WAITBUT,RELBUT, INIT, ONE, TWO, THREE, FOUR, FIN } state;

void menu_tick() {
   switch(m_state) { //transitions
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	91 f0       	breq	.+36     	; 0x3aa <menu_tick+0x2c>
 386:	28 f0       	brcs	.+10     	; 0x392 <menu_tick+0x14>
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	a9 f0       	breq	.+42     	; 0x3b6 <menu_tick+0x38>
 38c:	83 30       	cpi	r24, 0x03	; 3
 38e:	29 f1       	breq	.+74     	; 0x3da <menu_tick+0x5c>
 390:	35 c0       	rjmp	.+106    	; 0x3fc <menu_tick+0x7e>
      case WAIT:
         if (up && !down && !right && !left) { // up to start
 392:	1a 99       	sbic	0x03, 2	; 3
 394:	35 c0       	rjmp	.+106    	; 0x400 <__LOCK_REGION_LENGTH__>
 396:	1d 9b       	sbis	0x03, 5	; 3
 398:	33 c0       	rjmp	.+102    	; 0x400 <__LOCK_REGION_LENGTH__>
 39a:	1c 9b       	sbis	0x03, 4	; 3
 39c:	31 c0       	rjmp	.+98     	; 0x400 <__LOCK_REGION_LENGTH__>
 39e:	1b 9b       	sbis	0x03, 3	; 3
 3a0:	2f c0       	rjmp	.+94     	; 0x400 <__LOCK_REGION_LENGTH__>
            m_state = BUTPRESS;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <m_state>
 3a8:	08 95       	ret
         else {
            m_state = WAIT;
         }
         break;
      case BUTPRESS:
         if (!up) {
 3aa:	1a 9b       	sbis	0x03, 2	; 3
 3ac:	2e c0       	rjmp	.+92     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
            m_state = START;
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <m_state>
 3b4:	27 c0       	rjmp	.+78     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
         else {
            m_state = BUTPRESS;
         }
         break;
      case START:
         if (up && down && left && right) { //reset
 3b6:	1a 99       	sbic	0x03, 2	; 3
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <menu_tick+0x44>
 3ba:	1d 99       	sbic	0x03, 5	; 3
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <menu_tick+0x44>
 3be:	1b 9b       	sbis	0x03, 3	; 3
 3c0:	83 b1       	in	r24, 0x03	; 3
            m_state = WAIT;
         }
         if (gameStatus == 1) {
 3c2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <gameStatus>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	21 f4       	brne	.+8      	; 0x3d2 <menu_tick+0x54>
            m_state = END;
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <m_state>
 3d0:	1b c0       	rjmp	.+54     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
         }
         else {
            m_state = START;
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <m_state>
 3d8:	15 c0       	rjmp	.+42     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
         }
         break;
      case END:
         if (up && down && left && right) { //reset
 3da:	1a 99       	sbic	0x03, 2	; 3
 3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <menu_tick+0x68>
 3de:	1d 99       	sbic	0x03, 5	; 3
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <menu_tick+0x68>
 3e2:	1b 9b       	sbis	0x03, 3	; 3
 3e4:	83 b1       	in	r24, 0x03	; 3
            m_state = WAIT;
         }
         if (gameStatus == 1) {
 3e6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <gameStatus>
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	21 f4       	brne	.+8      	; 0x3f6 <menu_tick+0x78>
            m_state = END;
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <m_state>
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
         }
         else {
            m_state = WAIT;
 3f6:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <m_state>
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
         }
         break;
      default:
         m_state = WAIT;
 3fc:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <m_state>
         break;
   }
   switch(m_state) { //actions
      case WAIT:
         startGame();
 400:	5e cf       	rjmp	.-324    	; 0x2be <startGame>
         break;
      case BUTPRESS:
         break;
      case START:
         displayScore();
 402:	08 95       	ret
         break;
 404:	a3 cf       	rjmp	.-186    	; 0x34c <displayScore>
      case END:
         displayHighScore();
 406:	08 95       	ret
 408:	ad cf       	rjmp	.-166    	; 0x364 <displayHighScore>
 40a:	08 95       	ret

0000040c <genRandom>:
   }
}


int genRandom() {
   return (rand() % 4) + 3;
 40c:	6c d2       	rcall	.+1240   	; 0x8e6 <rand>
 40e:	83 70       	andi	r24, 0x03	; 3
 410:	90 78       	andi	r25, 0x80	; 128
 412:	99 23       	and	r25, r25
 414:	24 f4       	brge	.+8      	; 0x41e <genRandom+0x12>
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	8c 6f       	ori	r24, 0xFC	; 252
 41a:	9f 6f       	ori	r25, 0xFF	; 255
 41c:	01 96       	adiw	r24, 0x01	; 1
}
 41e:	03 96       	adiw	r24, 0x03	; 3
 420:	08 95       	ret

00000422 <led_tick>:
}

//enum LED_STATES = { WAITBUT,RELBUT, INIT, 1, 2, 3, 4, FIN };

void led_tick() {
   switch(state) { //led transitions
 422:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <state>
 426:	8e 2f       	mov	r24, r30
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	88 30       	cpi	r24, 0x08	; 8
 42c:	91 05       	cpc	r25, r1
 42e:	08 f0       	brcs	.+2      	; 0x432 <led_tick+0x10>
 430:	73 c0       	rjmp	.+230    	; 0x518 <led_tick+0xf6>
 432:	fc 01       	movw	r30, r24
 434:	ea 5b       	subi	r30, 0xBA	; 186
 436:	ff 4f       	sbci	r31, 0xFF	; 255
 438:	06 c2       	rjmp	.+1036   	; 0x846 <__tablejump2__>
      case WAITBUT:
         if (up && !down && !right && !left) {
 43a:	1a 99       	sbic	0x03, 2	; 3
 43c:	6f c0       	rjmp	.+222    	; 0x51c <led_tick+0xfa>
 43e:	1d 9b       	sbis	0x03, 5	; 3
 440:	6d c0       	rjmp	.+218    	; 0x51c <led_tick+0xfa>
 442:	1c 9b       	sbis	0x03, 4	; 3
 444:	6b c0       	rjmp	.+214    	; 0x51c <led_tick+0xfa>
 446:	1b 9b       	sbis	0x03, 3	; 3
 448:	69 c0       	rjmp	.+210    	; 0x51c <led_tick+0xfa>
            state = RELBUT;
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <state>
 450:	08 95       	ret
         else {
            state = WAITBUT;
         }
         break;
      case RELBUT:
         if(!up) {
 452:	1a 9b       	sbis	0x03, 2	; 3
 454:	2d c1       	rjmp	.+602    	; 0x6b0 <led_tick+0x28e>
            state = INIT;
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <state>
         else {
            state = RELBUT;
         }
         break;
      case INIT:
         LEDrandom = genRandom();
 45c:	62 c0       	rjmp	.+196    	; 0x522 <led_tick+0x100>
 45e:	d6 df       	rcall	.-84     	; 0x40c <genRandom>
 460:	e8 2f       	mov	r30, r24
 462:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <LEDrandom>
 466:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <LEDrandom+0x1>
         if (gameStatus == 1) {
 46a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <gameStatus>
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	21 f4       	brne	.+8      	; 0x47a <led_tick+0x58>
            state = FIN;
 472:	87 e0       	ldi	r24, 0x07	; 7
 474:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <state>
 478:	0b c1       	rjmp	.+534    	; 0x690 <led_tick+0x26e>
         }
         else {
            state = LEDrandom;
 47a:	e0 93 80 01 	sts	0x0180, r30	; 0x800180 <state>
         break;
      default:
         state = WAITBUT;
         break;
   }
   switch(state) {       //LED ACTIONS
 47e:	8e 2f       	mov	r24, r30
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	88 30       	cpi	r24, 0x08	; 8
 484:	91 05       	cpc	r25, r1
 486:	08 f0       	brcs	.+2      	; 0x48a <led_tick+0x68>
 488:	13 c1       	rjmp	.+550    	; 0x6b0 <led_tick+0x28e>
 48a:	fc 01       	movw	r30, r24
 48c:	e2 5b       	subi	r30, 0xB2	; 178
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	da c1       	rjmp	.+948    	; 0x846 <__tablejump2__>
         else {
            state = LEDrandom;
         }
         break;
      case ONE:      //up
         if (up && down && right && left) {
 492:	1a 99       	sbic	0x03, 2	; 3
 494:	09 c0       	rjmp	.+18     	; 0x4a8 <led_tick+0x86>
 496:	1d 99       	sbic	0x03, 5	; 3
 498:	07 c0       	rjmp	.+14     	; 0x4a8 <led_tick+0x86>
 49a:	1c 99       	sbic	0x03, 4	; 3
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <led_tick+0x86>
 49e:	1b 99       	sbic	0x03, 3	; 3
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <led_tick+0x86>
            state = WAITBUT;
 4a2:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <state>
 4a6:	3a c0       	rjmp	.+116    	; 0x51c <led_tick+0xfa>
         }
         else {
            state = INIT;
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <state>
 4ae:	39 c0       	rjmp	.+114    	; 0x522 <led_tick+0x100>
         }
         break;
      case TWO:      //down
         if (up && down && left && right) {
 4b0:	1a 99       	sbic	0x03, 2	; 3
 4b2:	09 c0       	rjmp	.+18     	; 0x4c6 <led_tick+0xa4>
 4b4:	1d 99       	sbic	0x03, 5	; 3
 4b6:	07 c0       	rjmp	.+14     	; 0x4c6 <led_tick+0xa4>
 4b8:	1b 99       	sbic	0x03, 3	; 3
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <led_tick+0xa4>
 4bc:	1c 99       	sbic	0x03, 4	; 3
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <led_tick+0xa4>
            state = WAITBUT;
 4c0:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <state>
 4c4:	2b c0       	rjmp	.+86     	; 0x51c <led_tick+0xfa>
         }
         else {
            state = INIT;
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <state>
 4cc:	2a c0       	rjmp	.+84     	; 0x522 <led_tick+0x100>
         }
         break;
      case THREE:      //left
         if (up && down && left && right) {
 4ce:	1a 99       	sbic	0x03, 2	; 3
 4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <led_tick+0xc2>
 4d2:	1d 99       	sbic	0x03, 5	; 3
 4d4:	07 c0       	rjmp	.+14     	; 0x4e4 <led_tick+0xc2>
 4d6:	1b 99       	sbic	0x03, 3	; 3
 4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <led_tick+0xc2>
 4da:	1c 99       	sbic	0x03, 4	; 3
 4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <led_tick+0xc2>
            state = WAITBUT;
 4de:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <state>
 4e2:	1c c0       	rjmp	.+56     	; 0x51c <led_tick+0xfa>
         }
         else {
            state = INIT;
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <state>
 4ea:	1b c0       	rjmp	.+54     	; 0x522 <led_tick+0x100>
         }
         break;
      case FOUR:      //right
         if (up && down && left && right) {
 4ec:	1a 99       	sbic	0x03, 2	; 3
 4ee:	09 c0       	rjmp	.+18     	; 0x502 <led_tick+0xe0>
 4f0:	1d 99       	sbic	0x03, 5	; 3
 4f2:	07 c0       	rjmp	.+14     	; 0x502 <led_tick+0xe0>
 4f4:	1b 99       	sbic	0x03, 3	; 3
 4f6:	05 c0       	rjmp	.+10     	; 0x502 <led_tick+0xe0>
 4f8:	1c 99       	sbic	0x03, 4	; 3
 4fa:	03 c0       	rjmp	.+6      	; 0x502 <led_tick+0xe0>
            state = WAITBUT;
 4fc:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <state>
 500:	0d c0       	rjmp	.+26     	; 0x51c <led_tick+0xfa>
         }
         else {
            state = INIT;
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <state>
 508:	0c c0       	rjmp	.+24     	; 0x522 <led_tick+0x100>
         }
         break;
      case FIN:
         if (gameStatus == 0) {
 50a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <gameStatus>
 50e:	81 11       	cpse	r24, r1
 510:	bf c0       	rjmp	.+382    	; 0x690 <led_tick+0x26e>
            state = WAITBUT;
 512:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <state>
 516:	02 c0       	rjmp	.+4      	; 0x51c <led_tick+0xfa>
         else {
            state = FIN;
         }
         break;
      default:
         state = WAITBUT;
 518:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <state>
         break;
   }
   switch(state) {       //LED ACTIONS
      case WAITBUT:
         PORTA = 0x00;
 51c:	12 b8       	out	0x02, r1	; 2
         PORTC = 0x00;
 51e:	18 b8       	out	0x08, r1	; 8
         break;
 520:	08 95       	ret
      case RELBUT:
         break;
      case INIT:
         if (counter >= 30) {
 522:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <counter>
 526:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <counter+0x1>
 52a:	4e 97       	sbiw	r24, 0x1e	; 30
 52c:	0c f4       	brge	.+2      	; 0x530 <led_tick+0x10e>
 52e:	c0 c0       	rjmp	.+384    	; 0x6b0 <led_tick+0x28e>
			 gameStatus = 1;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <gameStatus>
 536:	08 95       	ret
		 }
         break;
      case ONE: //up
         PORTA = Rows[0] | Rows[1] | Rows[2] | Rows[3] | Rows[4] | Rows[5] | Rows[6] | Rows[7];
 538:	ec e0       	ldi	r30, 0x0C	; 12
 53a:	f1 e0       	ldi	r31, 0x01	; 1
 53c:	90 81       	ld	r25, Z
 53e:	81 81       	ldd	r24, Z+1	; 0x01
 540:	89 2b       	or	r24, r25
 542:	92 81       	ldd	r25, Z+2	; 0x02
 544:	89 2b       	or	r24, r25
 546:	93 81       	ldd	r25, Z+3	; 0x03
 548:	89 2b       	or	r24, r25
 54a:	94 81       	ldd	r25, Z+4	; 0x04
 54c:	89 2b       	or	r24, r25
 54e:	95 81       	ldd	r25, Z+5	; 0x05
 550:	89 2b       	or	r24, r25
 552:	96 81       	ldd	r25, Z+6	; 0x06
 554:	89 2b       	or	r24, r25
 556:	97 81       	ldd	r25, Z+7	; 0x07
 558:	89 2b       	or	r24, r25
 55a:	82 b9       	out	0x02, r24	; 2
         PORTC = Cols[6] & Cols[7];
 55c:	e4 e0       	ldi	r30, 0x04	; 4
 55e:	f1 e0       	ldi	r31, 0x01	; 1
 560:	96 81       	ldd	r25, Z+6	; 0x06
 562:	87 81       	ldd	r24, Z+7	; 0x07
 564:	89 23       	and	r24, r25
 566:	88 b9       	out	0x08, r24	; 8
		 counter++;
 568:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <counter>
 56c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <counter+0x1>
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <counter+0x1>
 576:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <counter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57a:	2f e3       	ldi	r18, 0x3F	; 63
 57c:	8d e0       	ldi	r24, 0x0D	; 13
 57e:	93 e0       	ldi	r25, 0x03	; 3
 580:	21 50       	subi	r18, 0x01	; 1
 582:	80 40       	sbci	r24, 0x00	; 0
 584:	90 40       	sbci	r25, 0x00	; 0
 586:	e1 f7       	brne	.-8      	; 0x580 <led_tick+0x15e>
 588:	00 c0       	rjmp	.+0      	; 0x58a <led_tick+0x168>
 58a:	00 00       	nop
 58c:	08 95       	ret
		 _delay_ms(1000);
         break;
      case TWO: //down
         PORTA = Rows[0] | Rows[1] | Rows[2] | Rows[3] | Rows[4] | Rows[5] | Rows[6] | Rows[7];
 58e:	ec e0       	ldi	r30, 0x0C	; 12
 590:	f1 e0       	ldi	r31, 0x01	; 1
 592:	90 81       	ld	r25, Z
 594:	81 81       	ldd	r24, Z+1	; 0x01
 596:	89 2b       	or	r24, r25
 598:	92 81       	ldd	r25, Z+2	; 0x02
 59a:	89 2b       	or	r24, r25
 59c:	93 81       	ldd	r25, Z+3	; 0x03
 59e:	89 2b       	or	r24, r25
 5a0:	94 81       	ldd	r25, Z+4	; 0x04
 5a2:	89 2b       	or	r24, r25
 5a4:	95 81       	ldd	r25, Z+5	; 0x05
 5a6:	89 2b       	or	r24, r25
 5a8:	96 81       	ldd	r25, Z+6	; 0x06
 5aa:	89 2b       	or	r24, r25
 5ac:	97 81       	ldd	r25, Z+7	; 0x07
 5ae:	89 2b       	or	r24, r25
 5b0:	82 b9       	out	0x02, r24	; 2
         PORTC = Cols[0] & Cols[1];
 5b2:	e4 e0       	ldi	r30, 0x04	; 4
 5b4:	f1 e0       	ldi	r31, 0x01	; 1
 5b6:	90 81       	ld	r25, Z
 5b8:	81 81       	ldd	r24, Z+1	; 0x01
 5ba:	89 23       	and	r24, r25
 5bc:	88 b9       	out	0x08, r24	; 8
		 counter++;
 5be:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <counter>
 5c2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <counter+0x1>
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <counter+0x1>
 5cc:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <counter>
 5d0:	2f e3       	ldi	r18, 0x3F	; 63
 5d2:	8d e0       	ldi	r24, 0x0D	; 13
 5d4:	93 e0       	ldi	r25, 0x03	; 3
 5d6:	21 50       	subi	r18, 0x01	; 1
 5d8:	80 40       	sbci	r24, 0x00	; 0
 5da:	90 40       	sbci	r25, 0x00	; 0
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <led_tick+0x1b4>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <led_tick+0x1be>
 5e0:	00 00       	nop
 5e2:	08 95       	ret
		 _delay_ms(1000);
         break;
      case THREE: //left
         PORTA = Rows[0] | Rows[1];
 5e4:	ec e0       	ldi	r30, 0x0C	; 12
 5e6:	f1 e0       	ldi	r31, 0x01	; 1
 5e8:	90 81       	ld	r25, Z
 5ea:	81 81       	ldd	r24, Z+1	; 0x01
 5ec:	89 2b       	or	r24, r25
 5ee:	82 b9       	out	0x02, r24	; 2
         PORTC = Cols[0] & Cols[1] & Cols[2] & Cols[3] & Cols[4] & Cols[5] & Cols[6] & Cols[7];
 5f0:	e4 e0       	ldi	r30, 0x04	; 4
 5f2:	f1 e0       	ldi	r31, 0x01	; 1
 5f4:	90 81       	ld	r25, Z
 5f6:	81 81       	ldd	r24, Z+1	; 0x01
 5f8:	89 23       	and	r24, r25
 5fa:	92 81       	ldd	r25, Z+2	; 0x02
 5fc:	89 23       	and	r24, r25
 5fe:	93 81       	ldd	r25, Z+3	; 0x03
 600:	89 23       	and	r24, r25
 602:	94 81       	ldd	r25, Z+4	; 0x04
 604:	89 23       	and	r24, r25
 606:	95 81       	ldd	r25, Z+5	; 0x05
 608:	89 23       	and	r24, r25
 60a:	96 81       	ldd	r25, Z+6	; 0x06
 60c:	89 23       	and	r24, r25
 60e:	97 81       	ldd	r25, Z+7	; 0x07
 610:	89 23       	and	r24, r25
 612:	88 b9       	out	0x08, r24	; 8
		 counter++;
 614:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <counter>
 618:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <counter+0x1>
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <counter+0x1>
 622:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <counter>
 626:	2f e3       	ldi	r18, 0x3F	; 63
 628:	8d e0       	ldi	r24, 0x0D	; 13
 62a:	93 e0       	ldi	r25, 0x03	; 3
 62c:	21 50       	subi	r18, 0x01	; 1
 62e:	80 40       	sbci	r24, 0x00	; 0
 630:	90 40       	sbci	r25, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <led_tick+0x20a>
 634:	00 c0       	rjmp	.+0      	; 0x636 <led_tick+0x214>
 636:	00 00       	nop
 638:	08 95       	ret
		 _delay_ms(1000);
         break;
      case FOUR: //right
         PORTA = Rows[6] | Rows[7];
 63a:	ec e0       	ldi	r30, 0x0C	; 12
 63c:	f1 e0       	ldi	r31, 0x01	; 1
 63e:	96 81       	ldd	r25, Z+6	; 0x06
 640:	87 81       	ldd	r24, Z+7	; 0x07
 642:	89 2b       	or	r24, r25
 644:	82 b9       	out	0x02, r24	; 2
         PORTC = Cols[0] & Cols[1] & Cols[2] & Cols[3] & Cols[4] & Cols[5] & Cols[6] & Cols[7];
 646:	e4 e0       	ldi	r30, 0x04	; 4
 648:	f1 e0       	ldi	r31, 0x01	; 1
 64a:	90 81       	ld	r25, Z
 64c:	81 81       	ldd	r24, Z+1	; 0x01
 64e:	89 23       	and	r24, r25
 650:	92 81       	ldd	r25, Z+2	; 0x02
 652:	89 23       	and	r24, r25
 654:	93 81       	ldd	r25, Z+3	; 0x03
 656:	89 23       	and	r24, r25
 658:	94 81       	ldd	r25, Z+4	; 0x04
 65a:	89 23       	and	r24, r25
 65c:	95 81       	ldd	r25, Z+5	; 0x05
 65e:	89 23       	and	r24, r25
 660:	96 81       	ldd	r25, Z+6	; 0x06
 662:	89 23       	and	r24, r25
 664:	97 81       	ldd	r25, Z+7	; 0x07
 666:	89 23       	and	r24, r25
 668:	88 b9       	out	0x08, r24	; 8
		 counter++;
 66a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <counter>
 66e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <counter+0x1>
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <counter+0x1>
 678:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <counter>
 67c:	2f e3       	ldi	r18, 0x3F	; 63
 67e:	8d e0       	ldi	r24, 0x0D	; 13
 680:	93 e0       	ldi	r25, 0x03	; 3
 682:	21 50       	subi	r18, 0x01	; 1
 684:	80 40       	sbci	r24, 0x00	; 0
 686:	90 40       	sbci	r25, 0x00	; 0
 688:	e1 f7       	brne	.-8      	; 0x682 <led_tick+0x260>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <led_tick+0x26a>
 68c:	00 00       	nop
		 _delay_ms(1000);
         break;
      case FIN:
         displayHighScore();
 68e:	08 95       	ret
 690:	69 de       	rcall	.-814    	; 0x364 <displayHighScore>
		 counter = 0;
 692:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <counter+0x1>
 696:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <counter>
 69a:	2f e7       	ldi	r18, 0x7F	; 127
 69c:	84 e8       	ldi	r24, 0x84	; 132
 69e:	9e e1       	ldi	r25, 0x1E	; 30
 6a0:	21 50       	subi	r18, 0x01	; 1
 6a2:	80 40       	sbci	r24, 0x00	; 0
 6a4:	90 40       	sbci	r25, 0x00	; 0
 6a6:	e1 f7       	brne	.-8      	; 0x6a0 <led_tick+0x27e>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <led_tick+0x288>
 6aa:	00 00       	nop
		 _delay_ms(10000);
		 gameStatus = 0;
 6ac:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <gameStatus>
 6b0:	08 95       	ret

000006b2 <main>:
   return (rand() % 4) + 3;
}



int main(void) {
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	00 d0       	rcall	.+0      	; 0x6b8 <main+0x6>
 6b8:	00 d0       	rcall	.+0      	; 0x6ba <main+0x8>
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFF; PORTA = 0x00; // LED Matrix Rows  
 6be:	8f ef       	ldi	r24, 0xFF	; 255
 6c0:	81 b9       	out	0x01, r24	; 1
 6c2:	12 b8       	out	0x02, r1	; 2
    DDRC = 0xFF; PORTC = 0x00; // LED Matrix Cols
 6c4:	87 b9       	out	0x07, r24	; 7
 6c6:	18 b8       	out	0x08, r1	; 8
    DDRB = 0xC3; PORTB = 0x3C; // Output: LCD Input: buttons
 6c8:	93 ec       	ldi	r25, 0xC3	; 195
 6ca:	94 b9       	out	0x04, r25	; 4
 6cc:	9c e3       	ldi	r25, 0x3C	; 60
 6ce:	95 b9       	out	0x05, r25	; 5
    DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 6d0:	8a b9       	out	0x0a, r24	; 10
 6d2:	1b b8       	out	0x0b, r1	; 11
     
    static task task1, task2;
    task *tasks[] = { &task1, &task2 };
 6d4:	eb e6       	ldi	r30, 0x6B	; 107
 6d6:	f1 e0       	ldi	r31, 0x01	; 1
 6d8:	fa 83       	std	Y+2, r31	; 0x02
 6da:	e9 83       	std	Y+1, r30	; 0x01
 6dc:	a0 e6       	ldi	r26, 0x60	; 96
 6de:	b1 e0       	ldi	r27, 0x01	; 1
 6e0:	bc 83       	std	Y+4, r27	; 0x04
 6e2:	ab 83       	std	Y+3, r26	; 0x03
    const unsigned short numTasks = sizeof(tasks)/ sizeof(task*);
    unsigned short i; //loop iterator
    unsigned long GCD = tasks[0] -> period;
 6e4:	51 81       	ldd	r21, Z+1	; 0x01
 6e6:	42 81       	ldd	r20, Z+2	; 0x02
 6e8:	33 81       	ldd	r19, Z+3	; 0x03
 6ea:	24 81       	ldd	r18, Z+4	; 0x04
    for (i = 1; i < numTasks; i++) {
       GCD = findGCD(GCD,tasks[i]->period);
 6ec:	11 96       	adiw	r26, 0x01	; 1
 6ee:	8d 90       	ld	r8, X+
 6f0:	9d 90       	ld	r9, X+
 6f2:	ad 90       	ld	r10, X+
 6f4:	bc 90       	ld	r11, X
 6f6:	14 97       	sbiw	r26, 0x04	; 4
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <main+0x4c>
   unsigned long int c;
   while(1) {
      c = a % b;
      if (c == 0) { return b;}
      a = b;
      b = c;
 6fa:	4b 01       	movw	r8, r22
 6fc:	5c 01       	movw	r10, r24
#define SCHEDULER_H

unsigned long int findGCD(unsigned long int a, unsigned long int b) {
   unsigned long int c;
   while(1) {
      c = a % b;
 6fe:	65 2f       	mov	r22, r21
 700:	74 2f       	mov	r23, r20
 702:	83 2f       	mov	r24, r19
 704:	92 2f       	mov	r25, r18
 706:	a5 01       	movw	r20, r10
 708:	94 01       	movw	r18, r8
 70a:	7b d0       	rcall	.+246    	; 0x802 <__udivmodsi4>
 70c:	58 2d       	mov	r21, r8
 70e:	49 2d       	mov	r20, r9
 710:	3a 2d       	mov	r19, r10
 712:	2b 2d       	mov	r18, r11
      if (c == 0) { return b;}
 714:	61 15       	cp	r22, r1
 716:	71 05       	cpc	r23, r1
 718:	81 05       	cpc	r24, r1
 71a:	91 05       	cpc	r25, r1
 71c:	71 f7       	brne	.-36     	; 0x6fa <main+0x48>
    }

    task1.state = WAIT; //menu
 71e:	eb e6       	ldi	r30, 0x6B	; 107
 720:	f1 e0       	ldi	r31, 0x01	; 1
 722:	10 82       	st	Z, r1
    task1.period = 100;
 724:	84 e6       	ldi	r24, 0x64	; 100
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	a0 e0       	ldi	r26, 0x00	; 0
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	81 83       	std	Z+1, r24	; 0x01
 72e:	92 83       	std	Z+2, r25	; 0x02
 730:	a3 83       	std	Z+3, r26	; 0x03
 732:	b4 83       	std	Z+4, r27	; 0x04
    task1.elapsedTime = task1.period;
 734:	85 83       	std	Z+5, r24	; 0x05
 736:	96 83       	std	Z+6, r25	; 0x06
 738:	a7 83       	std	Z+7, r26	; 0x07
 73a:	b0 87       	std	Z+8, r27	; 0x08
    task1.TickFct = &menu_tick;
 73c:	2f eb       	ldi	r18, 0xBF	; 191
 73e:	31 e0       	ldi	r19, 0x01	; 1
 740:	32 87       	std	Z+10, r19	; 0x0a
 742:	21 87       	std	Z+9, r18	; 0x09

    task2.state = WAITBUT; //LED
 744:	e0 e6       	ldi	r30, 0x60	; 96
 746:	f1 e0       	ldi	r31, 0x01	; 1
 748:	10 82       	st	Z, r1
    task2.period = 100;
 74a:	81 83       	std	Z+1, r24	; 0x01
 74c:	92 83       	std	Z+2, r25	; 0x02
 74e:	a3 83       	std	Z+3, r26	; 0x03
 750:	b4 83       	std	Z+4, r27	; 0x04
    task2.elapsedTime = task2.period;
 752:	85 83       	std	Z+5, r24	; 0x05
 754:	96 83       	std	Z+6, r25	; 0x06
 756:	a7 83       	std	Z+7, r26	; 0x07
 758:	b0 87       	std	Z+8, r27	; 0x08
    task2.TickFct = &led_tick;
 75a:	81 e1       	ldi	r24, 0x11	; 17
 75c:	92 e0       	ldi	r25, 0x02	; 2
 75e:	92 87       	std	Z+10, r25	; 0x0a
 760:	81 87       	std	Z+9, r24	; 0x09
    
    
    TimerSet(GCD);
 762:	c5 01       	movw	r24, r10
 764:	b4 01       	movw	r22, r8
    TimerOn();
 766:	9a dd       	rcall	.-1228   	; 0x29c <TimerSet>
 768:	39 dd       	rcall	.-1422   	; 0x1dc <TimerOn>
 76a:	7e 01       	movw	r14, r28
 76c:	85 e0       	ldi	r24, 0x05	; 5
 76e:	e8 0e       	add	r14, r24
 770:	f1 1c       	adc	r15, r1
    while (1) {       
       if (gameStatus == 1) {
 772:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <gameStatus>
 776:	81 30       	cpi	r24, 0x01	; 1
          PORTA = 0x00;
 778:	e1 f5       	brne	.+120    	; 0x7f2 <main+0x140>
          PORTC = 0x00;
 77a:	12 b8       	out	0x02, r1	; 2
          displayHighScore();
 77c:	18 b8       	out	0x08, r1	; 8
 77e:	f2 dd       	rcall	.-1052   	; 0x364 <displayHighScore>
 780:	38 c0       	rjmp	.+112    	; 0x7f2 <main+0x140>
       }
       if (gameStatus == 0) {
          for (i = 0; i < numTasks; i++) {
             if(tasks[i] -> elapsedTime == tasks[i] -> period) {
 782:	d6 01       	movw	r26, r12
 784:	0d 91       	ld	r16, X+
 786:	1d 91       	ld	r17, X+
 788:	6d 01       	movw	r12, r26
 78a:	f8 01       	movw	r30, r16
 78c:	45 81       	ldd	r20, Z+5	; 0x05
 78e:	56 81       	ldd	r21, Z+6	; 0x06
 790:	67 81       	ldd	r22, Z+7	; 0x07
 792:	70 85       	ldd	r23, Z+8	; 0x08
 794:	81 81       	ldd	r24, Z+1	; 0x01
 796:	92 81       	ldd	r25, Z+2	; 0x02
 798:	a3 81       	ldd	r26, Z+3	; 0x03
 79a:	b4 81       	ldd	r27, Z+4	; 0x04
 79c:	48 17       	cp	r20, r24
 79e:	59 07       	cpc	r21, r25
 7a0:	6a 07       	cpc	r22, r26
 7a2:	7b 07       	cpc	r23, r27
 7a4:	79 f4       	brne	.+30     	; 0x7c4 <main+0x112>
                tasks[i] -> state = tasks[i] -> TickFct(tasks[i] -> state);
 7a6:	80 81       	ld	r24, Z
 7a8:	01 84       	ldd	r0, Z+9	; 0x09
 7aa:	f2 85       	ldd	r31, Z+10	; 0x0a
 7ac:	e0 2d       	mov	r30, r0
 7ae:	08 2e       	mov	r0, r24
 7b0:	00 0c       	add	r0, r0
 7b2:	99 0b       	sbc	r25, r25
 7b4:	09 95       	icall
 7b6:	d8 01       	movw	r26, r16
 7b8:	8c 93       	st	X, r24
                tasks[i] -> elapsedTime = 0;
 7ba:	f8 01       	movw	r30, r16
 7bc:	15 82       	std	Z+5, r1	; 0x05
 7be:	16 82       	std	Z+6, r1	; 0x06
 7c0:	17 82       	std	Z+7, r1	; 0x07
 7c2:	10 86       	std	Z+8, r1	; 0x08
             }
             tasks[i] -> elapsedTime += GCD;
 7c4:	f8 01       	movw	r30, r16
 7c6:	85 81       	ldd	r24, Z+5	; 0x05
 7c8:	96 81       	ldd	r25, Z+6	; 0x06
 7ca:	a7 81       	ldd	r26, Z+7	; 0x07
 7cc:	b0 85       	ldd	r27, Z+8	; 0x08
 7ce:	88 0d       	add	r24, r8
 7d0:	99 1d       	adc	r25, r9
 7d2:	aa 1d       	adc	r26, r10
 7d4:	bb 1d       	adc	r27, r11
 7d6:	85 83       	std	Z+5, r24	; 0x05
 7d8:	96 83       	std	Z+6, r25	; 0x06
 7da:	a7 83       	std	Z+7, r26	; 0x07
 7dc:	b0 87       	std	Z+8, r27	; 0x08
          PORTA = 0x00;
          PORTC = 0x00;
          displayHighScore();
       }
       if (gameStatus == 0) {
          for (i = 0; i < numTasks; i++) {
 7de:	ce 14       	cp	r12, r14
 7e0:	df 04       	cpc	r13, r15
 7e2:	79 f6       	brne	.-98     	; 0x782 <main+0xd0>
             }
             tasks[i] -> elapsedTime += GCD;
          }
	   }
	   
       while (!TimerFlag);
 7e4:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <TimerFlag>
 7e8:	88 23       	and	r24, r24
 7ea:	e1 f3       	breq	.-8      	; 0x7e4 <main+0x132>
          TimerFlag = 0;
 7ec:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <TimerFlag>
    }
 7f0:	c0 cf       	rjmp	.-128    	; 0x772 <main+0xc0>
       if (gameStatus == 1) {
          PORTA = 0x00;
          PORTC = 0x00;
          displayHighScore();
       }
       if (gameStatus == 0) {
 7f2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <gameStatus>
 7f6:	81 11       	cpse	r24, r1
 7f8:	f5 cf       	rjmp	.-22     	; 0x7e4 <main+0x132>
 7fa:	ce 01       	movw	r24, r28
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	6c 01       	movw	r12, r24
 800:	c0 cf       	rjmp	.-128    	; 0x782 <main+0xd0>

00000802 <__udivmodsi4>:
 802:	a1 e2       	ldi	r26, 0x21	; 33
 804:	1a 2e       	mov	r1, r26
 806:	aa 1b       	sub	r26, r26
 808:	bb 1b       	sub	r27, r27
 80a:	fd 01       	movw	r30, r26
 80c:	0d c0       	rjmp	.+26     	; 0x828 <__udivmodsi4_ep>

0000080e <__udivmodsi4_loop>:
 80e:	aa 1f       	adc	r26, r26
 810:	bb 1f       	adc	r27, r27
 812:	ee 1f       	adc	r30, r30
 814:	ff 1f       	adc	r31, r31
 816:	a2 17       	cp	r26, r18
 818:	b3 07       	cpc	r27, r19
 81a:	e4 07       	cpc	r30, r20
 81c:	f5 07       	cpc	r31, r21
 81e:	20 f0       	brcs	.+8      	; 0x828 <__udivmodsi4_ep>
 820:	a2 1b       	sub	r26, r18
 822:	b3 0b       	sbc	r27, r19
 824:	e4 0b       	sbc	r30, r20
 826:	f5 0b       	sbc	r31, r21

00000828 <__udivmodsi4_ep>:
 828:	66 1f       	adc	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	1a 94       	dec	r1
 832:	69 f7       	brne	.-38     	; 0x80e <__udivmodsi4_loop>
 834:	60 95       	com	r22
 836:	70 95       	com	r23
 838:	80 95       	com	r24
 83a:	90 95       	com	r25
 83c:	9b 01       	movw	r18, r22
 83e:	ac 01       	movw	r20, r24
 840:	bd 01       	movw	r22, r26
 842:	cf 01       	movw	r24, r30
 844:	08 95       	ret

00000846 <__tablejump2__>:
 846:	ee 0f       	add	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	00 24       	eor	r0, r0
 84c:	00 1c       	adc	r0, r0
 84e:	0b be       	out	0x3b, r0	; 59
 850:	07 90       	elpm	r0, Z+
 852:	f6 91       	elpm	r31, Z
 854:	e0 2d       	mov	r30, r0
 856:	09 94       	ijmp

00000858 <do_rand>:
 858:	8f 92       	push	r8
 85a:	9f 92       	push	r9
 85c:	af 92       	push	r10
 85e:	bf 92       	push	r11
 860:	cf 92       	push	r12
 862:	df 92       	push	r13
 864:	ef 92       	push	r14
 866:	ff 92       	push	r15
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	ec 01       	movw	r28, r24
 86e:	68 81       	ld	r22, Y
 870:	79 81       	ldd	r23, Y+1	; 0x01
 872:	8a 81       	ldd	r24, Y+2	; 0x02
 874:	9b 81       	ldd	r25, Y+3	; 0x03
 876:	61 15       	cp	r22, r1
 878:	71 05       	cpc	r23, r1
 87a:	81 05       	cpc	r24, r1
 87c:	91 05       	cpc	r25, r1
 87e:	21 f4       	brne	.+8      	; 0x888 <do_rand+0x30>
 880:	64 e2       	ldi	r22, 0x24	; 36
 882:	79 ed       	ldi	r23, 0xD9	; 217
 884:	8b e5       	ldi	r24, 0x5B	; 91
 886:	97 e0       	ldi	r25, 0x07	; 7
 888:	2d e1       	ldi	r18, 0x1D	; 29
 88a:	33 ef       	ldi	r19, 0xF3	; 243
 88c:	41 e0       	ldi	r20, 0x01	; 1
 88e:	50 e0       	ldi	r21, 0x00	; 0
 890:	38 d0       	rcall	.+112    	; 0x902 <__divmodsi4>
 892:	49 01       	movw	r8, r18
 894:	5a 01       	movw	r10, r20
 896:	9b 01       	movw	r18, r22
 898:	ac 01       	movw	r20, r24
 89a:	a7 ea       	ldi	r26, 0xA7	; 167
 89c:	b1 e4       	ldi	r27, 0x41	; 65
 89e:	4d d0       	rcall	.+154    	; 0x93a <__muluhisi3>
 8a0:	6b 01       	movw	r12, r22
 8a2:	7c 01       	movw	r14, r24
 8a4:	ac ee       	ldi	r26, 0xEC	; 236
 8a6:	b4 ef       	ldi	r27, 0xF4	; 244
 8a8:	a5 01       	movw	r20, r10
 8aa:	94 01       	movw	r18, r8
 8ac:	52 d0       	rcall	.+164    	; 0x952 <__mulohisi3>
 8ae:	dc 01       	movw	r26, r24
 8b0:	cb 01       	movw	r24, r22
 8b2:	8c 0d       	add	r24, r12
 8b4:	9d 1d       	adc	r25, r13
 8b6:	ae 1d       	adc	r26, r14
 8b8:	bf 1d       	adc	r27, r15
 8ba:	b7 ff       	sbrs	r27, 7
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <do_rand+0x6c>
 8be:	01 97       	sbiw	r24, 0x01	; 1
 8c0:	a1 09       	sbc	r26, r1
 8c2:	b0 48       	sbci	r27, 0x80	; 128
 8c4:	88 83       	st	Y, r24
 8c6:	99 83       	std	Y+1, r25	; 0x01
 8c8:	aa 83       	std	Y+2, r26	; 0x02
 8ca:	bb 83       	std	Y+3, r27	; 0x03
 8cc:	9f 77       	andi	r25, 0x7F	; 127
 8ce:	df 91       	pop	r29
 8d0:	cf 91       	pop	r28
 8d2:	ff 90       	pop	r15
 8d4:	ef 90       	pop	r14
 8d6:	df 90       	pop	r13
 8d8:	cf 90       	pop	r12
 8da:	bf 90       	pop	r11
 8dc:	af 90       	pop	r10
 8de:	9f 90       	pop	r9
 8e0:	8f 90       	pop	r8
 8e2:	08 95       	ret

000008e4 <rand_r>:
 8e4:	b9 cf       	rjmp	.-142    	; 0x858 <do_rand>

000008e6 <rand>:
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	91 e0       	ldi	r25, 0x01	; 1
 8ea:	b6 cf       	rjmp	.-148    	; 0x858 <do_rand>

000008ec <srand>:
 8ec:	a0 e0       	ldi	r26, 0x00	; 0
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 8f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 8f8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 8fc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 900:	08 95       	ret

00000902 <__divmodsi4>:
 902:	05 2e       	mov	r0, r21
 904:	97 fb       	bst	r25, 7
 906:	16 f4       	brtc	.+4      	; 0x90c <__divmodsi4+0xa>
 908:	00 94       	com	r0
 90a:	0f d0       	rcall	.+30     	; 0x92a <__negsi2>
 90c:	57 fd       	sbrc	r21, 7
 90e:	05 d0       	rcall	.+10     	; 0x91a <__divmodsi4_neg2>
 910:	78 df       	rcall	.-272    	; 0x802 <__udivmodsi4>
 912:	07 fc       	sbrc	r0, 7
 914:	02 d0       	rcall	.+4      	; 0x91a <__divmodsi4_neg2>
 916:	46 f4       	brtc	.+16     	; 0x928 <__divmodsi4_exit>
 918:	08 c0       	rjmp	.+16     	; 0x92a <__negsi2>

0000091a <__divmodsi4_neg2>:
 91a:	50 95       	com	r21
 91c:	40 95       	com	r20
 91e:	30 95       	com	r19
 920:	21 95       	neg	r18
 922:	3f 4f       	sbci	r19, 0xFF	; 255
 924:	4f 4f       	sbci	r20, 0xFF	; 255
 926:	5f 4f       	sbci	r21, 0xFF	; 255

00000928 <__divmodsi4_exit>:
 928:	08 95       	ret

0000092a <__negsi2>:
 92a:	90 95       	com	r25
 92c:	80 95       	com	r24
 92e:	70 95       	com	r23
 930:	61 95       	neg	r22
 932:	7f 4f       	sbci	r23, 0xFF	; 255
 934:	8f 4f       	sbci	r24, 0xFF	; 255
 936:	9f 4f       	sbci	r25, 0xFF	; 255
 938:	08 95       	ret

0000093a <__muluhisi3>:
 93a:	0f d0       	rcall	.+30     	; 0x95a <__umulhisi3>
 93c:	a5 9f       	mul	r26, r21
 93e:	90 0d       	add	r25, r0
 940:	b4 9f       	mul	r27, r20
 942:	90 0d       	add	r25, r0
 944:	a4 9f       	mul	r26, r20
 946:	80 0d       	add	r24, r0
 948:	91 1d       	adc	r25, r1
 94a:	11 24       	eor	r1, r1
 94c:	08 95       	ret

0000094e <__mulshisi3>:
 94e:	b7 ff       	sbrs	r27, 7
 950:	f4 cf       	rjmp	.-24     	; 0x93a <__muluhisi3>

00000952 <__mulohisi3>:
 952:	f3 df       	rcall	.-26     	; 0x93a <__muluhisi3>
 954:	82 1b       	sub	r24, r18
 956:	93 0b       	sbc	r25, r19
 958:	08 95       	ret

0000095a <__umulhisi3>:
 95a:	a2 9f       	mul	r26, r18
 95c:	b0 01       	movw	r22, r0
 95e:	b3 9f       	mul	r27, r19
 960:	c0 01       	movw	r24, r0
 962:	a3 9f       	mul	r26, r19
 964:	70 0d       	add	r23, r0
 966:	81 1d       	adc	r24, r1
 968:	11 24       	eor	r1, r1
 96a:	91 1d       	adc	r25, r1
 96c:	b2 9f       	mul	r27, r18
 96e:	70 0d       	add	r23, r0
 970:	81 1d       	adc	r24, r1
 972:	11 24       	eor	r1, r1
 974:	91 1d       	adc	r25, r1
 976:	08 95       	ret

00000978 <_exit>:
 978:	f8 94       	cli

0000097a <__stop_program>:
 97a:	ff cf       	rjmp	.-2      	; 0x97a <__stop_program>
